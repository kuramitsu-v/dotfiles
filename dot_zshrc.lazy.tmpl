#--------------------------------------------------------------
# alias
#--------------------------------------------------------------

alias gb='git branch'
alias gf='git fetch -p'
alias ll='ls -l'
alias mh='make help'
alias nr='npm run'

#--------------------------------------------------------------
# plugin
#--------------------------------------------------------------

# wait = 遅延読み込み wait"0"と同義
# lucid = プラグイン読込時の表示をOFF
# atload = 読込完了時に実行する関数を指定
# as"program" = zshプラグインでないものを読込
# pick = 引数に与えられたものを$pathに追加
# blockf = プラグインによる$pathの変更を禁止する
zinit wait lucid light-mode blockf for \
    atload"_zsh_autosuggest_start" zsh-users/zsh-autosuggestions \
    ellie/atuin \
    atload"source ~/.fzf.zsh" junegunn/fzf \
    olets/zsh-abbr \
    denisidoro/navi \
    zdharma/fast-syntax-highlighting \
    as"program" cp"z.sh -> z" pick"z" rupa/z \
    atload"source asdf.sh" @'asdf-vm/asdf' \
    atload"zicompinit; zicdreplay" zsh-users/zsh-completions \
    silent atclone"zstyle ':completion:*:*:git:*' script git-completion.bash" atpull"%atclone" "https://github.com/git/git/blob/master/contrib/completion/git-completion.bash" \
    as"completion" atload"zicompinit; zicdreplay" mv"git-completion.zsh -> _git" "https://github.com/git/git/blob/master/contrib/completion/git-completion.zsh" \
    as"completion" "https://github.com/docker/cli/blob/master/contrib/completion/zsh/_docker"
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=100"

#--------------------------------------------------------------
# fzf
#--------------------------------------------------------------

# [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_DEFAULT_COMMAND='find $PWD -type d -path "$PWD/.*" -prune -o -not -name ".*" -type f -name "*" -print'
export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border'

{{ if eq .chezmoi.os "darwin" -}}
# fcb - fuzzy chrome bookmark
fcb() {
  bookmarks_path="$HOME/Library/Application Support/Google/Chrome/Profile 1/Bookmarks"

  jq_script='
    def ancestors: while(. | length >= 2; del(.[-1,-2]));
    . as $in | paths(.url?) as $key | $in | getpath($key) | {name,url, path: [$key[0:-2] | ancestors as $a | $in | getpath($a) | .name?] | reverse | join("/") } | .path + "/" + .name + "\t" + .url'

  jq -r "$jq_script" < "$bookmarks_path" \
    | sed -E $'s/(.*)\t(.*)/\\1\t\x1b[36m\\2\x1b[m/g' \
    | fzf --ansi \
    | cut -d$'\t' -f2 \
    | xargs open
}

# fch - fuzzy chrome history
fch() {
  local cols sep google_history open
  cols=$(( COLUMNS / 3 ))
  sep='{::}'

  if [ "$(uname)" = "Darwin" ]; then
    google_history="$HOME/Library/Application Support/Google/Chrome/Profile 1/History"
    open=open
  else
    google_history="$HOME/.config/google-chrome/Profile 1/History"
    open=xdg-open
  fi
  cp -f "$google_history" /tmp/h
  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs $open > /dev/null 2> /dev/null
}

# ff - fuzzy find
ff() {
  find ${1:-.} | fzf | tr -d '\n'| pbcopy
}

# fgb - fuzzy git branch
fgb() {
  local branches branch
  branches=$(git branch -a) &&
  branch=$(echo "$branches" | fzf --preview "git log --color=always --oneline --graph {1}") &&
  $(echo "${branch#*remotes/origin/}" | tr -d '\n' | pbcopy)
}

# fgc - fuzzy git checkout branch
fgc() {
  local branches branch
  branches=$(git branch -vv) &&
  branch=$(echo "$branches" | fzf --preview "git log --color=always --oneline --graph {1}") &&
  git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}

# fgh - fuzzy git hash copy
fgh() {
  local commits commit
  commits=$(git log --oneline) &&
  commit=$(echo "$commits" | fzf --preview "git show {1} | delta --no-gitconfig") &&
  $(echo "$commit" | awk '{print $1}' | tr -d '\n' | pbcopy)
}

# fghd - fuzzy git hash diff copy
fghd() {
  local commits commit1 commit2
  commits=$(git log --oneline) &&
  commit1=$(echo "$commits" | fzf | awk '{print $1}') &&
  commit2=$(echo "$commits" | fzf --preview "git diff "$commit1...{1}" | delta --no-gitconfig" | awk '{print $1}') &&
  git diff "$commit1...$commit2" | delta &&
  $(echo "$commit1...$commit2" | tr -d '\n' | pbcopy)
}

# fnr - fuzzy npm run
fnr() {
  local script
  script=$(cat package.json | jq -r '.scripts | to_entries[] | [.key,.value] | @csv' | column -t -s, | fzf | awk '{print $1}' | tr -d '"') &&
  if [ -n "$script" ]; then
    npm run $script
  fi
}
{{- end }}

# fz - fuzzy z command
fz() {
  local res=$(z | sort -rn | cut -c 12- | fzf)
  if [ -n "$res" ]; then
      cd $res
  else
      return 1
  fi
}

#--------------------------------------------------------------
# function・zsh widget
#--------------------------------------------------------------

# ctrl + dでgitui起動
_gitui() {
  BUFFER='gitui'
  zle accept-line
}
zle -N _gitui
bindkey "^D" _gitui

# ctrl + q → ctrl + qでnaviに登録されたpipe commandのsnippet呼び出し
_navi_insert_pipe_snippet() {
  local word
  word=$(_navi_call --print --query "pipe-command ")
  if [ -n "$word" ] ; then
    BUFFER="$BUFFER | $word"
    CURSOR=$#BUFFER #カーソルを末尾に移動
  fi
  zle redisplay
}
zle -N _navi_insert_pipe_snippet
bindkey '^Q^Q' _navi_insert_pipe_snippet

# ctrl + q → ctrl + aでコマンド履歴からwordを選択して出力
_fzf_insert_command_word() {
  local num command line array1 array2 word
  command=$(cat <(echo $BUFFER) <(history -100000 | cut -f 4- -d " " | tail -r) | fzf)
  if [ -n "$command" ] ; then
    for i in $(seq $(echo $command | wc -m)) ; do
      array1+=( "$(cut -c $i- <(echo $command))\n" )
    done
  fi
  if [ -n "${array1[*]}" ] ; then
    line=$(echo -e "${array1[@]}" | fzf)
    num=$(echo $line | wc -m)
    for j in $(seq $num) ; do
      array2+=( "$(cut -c -$((num-j+1)) <(echo $line))\n" )
    done
  fi
  if [ -n "${array2[*]}" ] ; then
    word=$(echo -e "${array2[@]}" | fzf)
    word=${word#"${word%%[![:space:]]*}"} #前方の空白文字を削除
    word=${word%"${word##*[![:space:]]}"} #後方の空白文字を削除
    word=$(echo $word | tr -d '\n')
  fi
  if [ -n "$word" ] ; then
    BUFFER="$BUFFER $word"
    CURSOR=$#BUFFER #カーソルを末尾に移動
  fi
  zle redisplay
}
zle -N _fzf_insert_command_word
bindkey '^Q^A' _fzf_insert_command_word

# ctrl + q → ctrl + zで画面キャプチャしてwordを選択してコピー
_copy_word() {
  local num line1 line2 array1 array2 word
  line1=$(tmux capture-pane -p | fzf)
  if [ -n "$line1" ] ; then
    for i in $(seq $(echo $line1 | wc -m)) ; do
      array1+=( "$(cut -c $i- <(echo $line1))\n" )
    done
  fi
  if [ -n "${array1[*]}" ] ; then
    line2=$(echo -e "${array1[@]}" | fzf)
    num=$(echo $line2 | wc -m)
    for j in $(seq $num) ; do
      array2+=( "$(cut -c -$((num-j+1)) <(echo $line2))\n" )
    done
  fi
  if [ -n "${array2[*]}" ] ; then
    word=$(echo -e "${array2[@]}" | fzf)
    word=${word%"${word##*[![:space:]]}"} #後方の空白文字を削除
    word=${word#"${word%%[![:space:]]*}"} #前方の空白文字を削除
  fi
  if [ -n "$word" ] ; then
    echo $word | tr -d '\n' | pbcopy
  fi
  zle redisplay
}
zle -N _copy_word
bindkey '^Q^Z' _copy_word

# option + ↑で１つ上のディレクトリに移動
_cd-up () {
  BUFFER='cd ../'
  zle accept-line
}
zle -N _cd-up
bindkey '^[[1;3A' _cd-up

autoload -U modify-current-argument
# Esc + sで単語を''で囲む
_quote-previous-word-in-single() {
    modify-current-argument '${(qq)${(Q)ARG}}'
    zle vi-forward-blank-word
}
zle -N _quote-previous-word-in-single
bindkey '^[s' _quote-previous-word-in-single

# Esc + dで単語を""で囲む
_quote-previous-word-in-double() {
    modify-current-argument '${(qqq)${(Q)ARG}}'
    zle vi-forward-blank-word
}
zle -N _quote-previous-word-in-double
bindkey '^[d' _quote-previous-word-in-double

#--------------------------------------------------------------
# function
#--------------------------------------------------------------

function ssh() {
  # tmux起動時
  if [[ -n $(printenv TMUX) ]] ; then
    # 接続先ホスト名に応じて背景色切り替え
    if [[ `echo $1 | grep 'audit'` ]] ; then
      tmux set -p window-active-style 'bg=#400000'
      tmux set -p window-style 'bg=#400000'
    else
      tmux set -p window-active-style 'bg=#002800'
      tmux set -p window-style 'bg=#002800'
    fi

    command ssh $@
    # 色設定を戻す
    tmux set -p window-style 'bg=#303030'
    tmux set -p window-active-style 'bg=#000000'
  else
    command ssh $@
  fi
}

#--------------------------------------------------------------
# other
#--------------------------------------------------------------
# pyenv setting
#export PYENV_ROOT="$HOME/.pyenv"
#export PATH="$PYENV_ROOT/bin:$PATH"
#if command -v pyenv 1>/dev/null 2>&1; then
#  eval "$(pyenv init -)"
#fi

# nodenv setting
#eval "$(nodenv init -)"
#export PATH="$(npm root -g):$PATH"

# atuin
export ATUIN_CONFIG_DIR="$HOME/.atuin"

# asdf
export ASDF_DATA_SHIMS="$HOME/.asdf/shims"
export ASDF_DATA_INSTALLS="$HOME/.asdf/installs"
export PATH="$ASDF_DATA_SHIMS:$ASDF_DATA_INSTALLS:$PATH"

# navi
eval "$(navi widget zsh)"

# z
. ~/z/z.sh

# bat
export BAT_THEME="Monokai Extended"

# .zshrc.secretの読込
ZSH_SECRET_CONF="${HOME}/.zshrc.secret"
if [ -e "${ZSH_SECRET_CONF}" ]; then
  source "${ZSH_SECRET_CONF}"
fi

# 補完の読込
autoload -Uz compinit
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
compinit

# zprofでのプロファイル測定用
if (which zprof > /dev/null 2>&1) ;then
  zprof
fi
