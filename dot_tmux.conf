# マウスでウィンドウ・ペインの切り替えやリサイズを可能にする
set -g mouse on

bind -T edit-mode-vi WheelUpPane send-keys -X scroll-up
bind -T edit-mode-vi WheelDownPane send-keys -X scroll-down

# スクロール可能な行数を10,000行にする
set -g history-limit 10000

# status line を更新する間隔を 1 秒にする
# set -g status-interval 1

#--------------------------------------------------------------
# style
#--------------------------------------------------------------

# True color化対応
set -g default-terminal "screen-256color"
# set -g default-terminal "tmux-256color" # tmux-256colorではMacOSでは表示崩れがあったため
set -ag terminal-overrides ",alacritty:RGB"

# ステータスバーの背景色を変更する
set -g status-bg "black"

# status line の文字色を指定する
set -g status-fg "#FFFFFF"

# window-status を中央揃えで配置する
set -g status-justify "centre"

# ステータスバーをトップに配置する
set -g status-position top

# status-left・status-rightを非表示にする
set -g status-left ""
set -g status-right ""

# ペインの開始番号を 0 から 1 に変更する
set -g base-index 1

# window名の背景色・文字色を指定
set -g window-status-format '#[bg=#808080] #I #{b:pane_current_path} '
set -g window-status-current-format '#[bg=yellow]#[fg=black]#{?client_prefix,#[bg=#00FF00],}#{?pane_synchronized,#[bg=#00FFBF],} #I #{b:pane_current_path}#{?window_zoomed_flag,Z,} '

# windowの背景色を指定
set -g window-style 'fg=colour247,bg=colour236'
set -g window-active-style 'fg=colour250,bg=black'

# copy-modeの検索のスタイルを指定
set -g mode-style "fg=black,bg=yellow"
set -g copy-mode-match-style "fg=black,bg=yellow"
set -g copy-mode-current-match-style "fg=yellow,bg=red"

#--------------------------------------------------------------
# key-binding
#--------------------------------------------------------------

# コピーモードのキー操作をviライクにする
set-window-option -g mode-keys vi

# 選択開始キーの設定
bind -T copy-mode-vi v send-keys -X begin-selection

# コピーモード時に ? でsearch-backward
bind -T copy-mode-vi "?" command-prompt -T search -p "(search up)" { send-keys -X search-backward "%%" }

# コピーモード→検索を1コマンドに設定
bind c-[ copy-mode \
  "\;" command-prompt -T search -p "(search up)" { send-keys -X search-backward "%%" }
# bind c-u run-shell "if [ copy-mode = $(tmux display -p -F "{pane_mode}") ] ; then tmux send-keys -X halfpage-up ; else tmux copy-mode && send-keys -X halfpage-up ; fi"

# 現在のディレクトリで水平/垂直分割
bind '"' split-window -c '#{pane_current_path}'
bind '%' split-window -h -c '#{pane_current_path}'

# ペインの上下左右移動
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# ペインの幅を上下左右に広げる
bind C-h resize-pane -L 5
bind C-j resize-pane -D 5
bind C-k resize-pane -U 5
bind C-l resize-pane -R 5

# synchronize-panesのON/OFF、sync時1
bind e run-shell '\
  if [ 0 = $(tmux display -p -F "#{pane_synchronized}") ] ; then \
    tmux set synchronize-panes on ; \
  else \
    tmux set synchronize-panes off ; \
  fi\
' 

# 設定ファイルのリロード
bind r source-file ~/.tmux.conf

# popup windowを起動/デタッチ、-E:exit時に自動で閉じる
bind C-p popup -xC -yC -w95% -h95% -E -d '#{pane_current_path}' '\
  if [ popup = $(tmux display -p -F "#{session_name}") ]; then \
    tmux detach-client ; \
  else \
　　# {while ~ done ; echo}でwhile内の変数参照、グルーピング{}の最後にも ; }必要
    # ディレクトリが一致するwindowを取得、例)popup:3.0
    window=$(tmux lsp -s -t popup | { while read pane; do [ $(tmux display -p -F "#{pane_current_path}") = $(tmux display -t popup:${pane%:*} -p -F "#{pane_current_path}") ] && pd=${pane%:*} ; done ; echo "popup:${pd}" ; } ) ; \
    # -c:new-window時のディレクトリを指定
    tmux attach -c $(tmux display -p -F "#{pane_current_path}") -t $window || tmux new -s popup ; \
  fi \
'

#--------------------------------------------------------------
# plugin
#--------------------------------------------------------------

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-yank'
# set -g @plugin 'IngoMeyer441/tmux-easy-motion'
# set -g @easy-motion-binding-bd-W "W"
# set -g @easy-motion-binding-bd-f "f"
# set -g @plugin 'CrispyConductor/tmux-copy-toolkit'
# set -g @plugin 'tmux-plugins/tmux-copycat'
# set -g @plugin 'fcsonline/tmux-thumbs'
# run-shell ~/.tmux/plugins/tmux-thumbs/tmux-thumbs.tmux

# tmux起動時にtmux-continuumで最後に保存された環境で復元する（デフォルトでは15分毎に自動保存）
set -g @continuum-restore 'on'

# Tmux plugin managerを初期化する
run '~/.tmux/plugins/tpm/tpm'
