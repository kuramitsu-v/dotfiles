#--------------------------------------------------------------
# zsh
#--------------------------------------------------------------

export WORDCHARS="*?_-.[]~&;=!#$%^(){}<>"

HISTSIZE=10000
SAVEHIST=100000

# 同時に起動したzsh間でヒストリを共有
setopt share_history
# 同じコマンドをヒストリに渡さない
setopt hist_ignore_all_dups

autoload -Uz compinit
compinit

zstyle ':completion:*:default' menu select=1

# キーバインドをemacs風にする
bindkey -e
# 逆Tab方向に移動
bindkey '^[^i' reverse-menu-complete
{{ if eq .chezmoi.os "darwin" -}}
# option + ←→で単語毎のカーソル移動
bindkey "3C" forward-word
bindkey "3D" backward-word

# option + shift + ←で単語毎の削除
bindkey "4D" backward-kill-word
# 上がうまくいかなかった時のカスタム関数
# my-backward-kill-word() {
#   zle backward-kill-word &&
#   zle backward-delete-char
# }
# zle -N my-backward-kill-word
# bindkey "4D" my-backward-kill-word
{{- end }}

#--------------------------------------------------------------
# alias
#--------------------------------------------------------------

alias gb='git branch'
alias gf='git fetch -p'
alias ll='ls -l'
alias mh='make help'
alias nr='npm run'

#--------------------------------------------------------------
# fzf
#--------------------------------------------------------------

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_DEFAULT_COMMAND='find $PWD -type d -path "$PWD/.*" -prune -o -not -name ".*" -type f -name "*" -print'
export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border'

{{ if eq .chezmoi.os "darwin" -}}
# ff - fuzzy find
ff() {
  find ${1:-.} | fzf | tr -d '\n'| pbcopy
}

# fgb - fuzzy git branch
fgb() {
  local branches branch
  branches=$(git branch -a) &&
  branch=$(echo "$branches" | fzf --preview "git log --color=always --oneline --graph {1}") &&
  $(echo "${branch#*remotes/origin/}" | tr -d '\n' | pbcopy)
}

# fgc - fuzzy git checkout branch
fgc() {
  local branches branch
  branches=$(git branch -vv) &&
  branch=$(echo "$branches" | fzf --preview "git log --color=always --oneline --graph {1}") &&
  git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}

# fgh - fuzzy git hash copy
fgh() {
  local commits commit
  commits=$(git log --oneline) &&
  commit=$(echo "$commits" | fzf --preview "git show {1} | delta --no-gitconfig") &&
  $(echo "$commit" | awk '{print $1}' | tr -d '\n' | pbcopy)
}

# fghd - fuzzy git hash diff copy
fghd() {
  local commits commit1 commit2
  commits=$(git log --oneline) &&
  commit1=$(echo "$commits" | fzf | awk '{print $1}') &&
  commit2=$(echo "$commits" | fzf --preview "git diff "$commit1...{1}" | delta --no-gitconfig" | awk '{print $1}') &&
  git diff "$commit1...$commit2" | delta &&
  $(echo "$commit1...$commit2" | tr -d '\n' | pbcopy)
}
{{- end }}

# fh - fuzzy z command
fz() {
  local res=$(z | sort -rn | cut -c 12- | fzf)
  if [ -n "$res" ]; then
      cd $res
  else
      return 1
  fi
}

#--------------------------------------------------------------
# plugin
#--------------------------------------------------------------

### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

### End of Zinit's installer chunk
zinit light zsh-users/zsh-autosuggestions
zinit light zsh-users/zsh-completions
zinit light zdharma/fast-syntax-highlighting
# zinit light starship/starship
zinit light denisidoro/navi
zinit light olets/zsh-abbr
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=100"

#--------------------------------------------------------------
# terminal
#--------------------------------------------------------------

# launch tmux when start zsh
if [ "$TERM" = "alacritty" ] && command -v tmux &> /dev/null && [ -z "$TMUX" ]; then
    exec tmux
fi

{{ if eq .chezmoi.os "darwin" -}}
# iTerm2
tab-color() {
  echo -ne "\033]6;1;bg;red;brightness;$1\a"
  echo -ne "\033]6;1;bg;green;brightness;$2\a"
  echo -ne "\033]6;1;bg;blue;brightness;$3\a"
}

tab-reset() {
  echo -ne "\033]6;1;bg;*;default\a"
}

chpwd() {
  if [ "$TERM" = "xterm-256color" ]; then
    case $PWD/ in
      ~) tab-color 0 200 0;;
      *) tab-reset;;
    esac
    echo -ne "\033]0;$(pwd | rev | awk -F \/ '{print "/"$1"/"$2}'| rev)\007"
  fi

  if [ "$TERM" = "screen-256color" ]; then
    case $PWD in
      ~) tmux set-option -w window-status-format '#[bg=#008000] #I #{b:pane_current_path} ' ;;
      *) tmux set-option -w window-status-format '#[bg=#808080] #I #{b:pane_current_path} ' ;;
    esac
  fi
}
{{- end }}

#--------------------------------------------------------------
# function
#--------------------------------------------------------------

#--------------------------------------------------------------
# other
#--------------------------------------------------------------
{{ if eq .chezmoi.os "darwin" -}}
# pyenv setting
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

# nodenv setting
eval "$(nodenv init -)"
export PATH="$(npm root -g):$PATH"
{{- end }}

# z
. ~/z/z.sh

# git-completion
fpath=(~/.zsh/completion $fpath)
zstyle ':completion:*:*:git:*' script ~/.zsh/completion/git-completion.bash

# sratship
eval "$(starship init zsh)"

# navi
eval "$(navi widget zsh)"

# .zshrc.secretの読込
ZSH_SECRET_CONF="${HOME}/.zshrc.secret"
if [ -e "${ZSH_SECRET_CONF}" ]; then
  source "${ZSH_SECRET_CONF}"
fi
