% shortcut

# my shortcut list
cat ~/.shortcut/my_shortcut.csv | column -t -s, | fzf

;--------------------------------------------------------------
; chrome
;--------------------------------------------------------------

% chrome

# select tab
bash ~/chrome_tab_activate.sh

;--------------------------------------------------------------
; cspell
;--------------------------------------------------------------

% cspell

# cspell lint master...HEAD
cspell --no-progress --root ~ $(git diff --name-only --line-prefix=$(git rev-parse --show-toplevel)/ master...HEAD)

;--------------------------------------------------------------
; django
;--------------------------------------------------------------

% django

# show migration list SQL [ex:python manage.py showmigrations issues]
python manage.py showmigrations <app_name>

# check migration SQL [ex:python manage.py sqlmigrate issues 0035]
python manage.py sqlmigrate <app_name> <migration_name>

# rollback migration [ex:python manage.py migrate concierges 0031]
python manage.py migrate <app_name> <rollback_to_migration_name>

;--------------------------------------------------------------
; docker
;--------------------------------------------------------------

% docker

# docker exec [ex:docker container exec -it <container_id> bash]
docker container exec -it <container_id> <command>

# docker disk free
docker system df

# docker disk image [-s:file block size][-k:KB][file:Docker.raw or Docker.qcow2]
ls -sk ~/Library/Containers/com.docker.docker/Data/vms/0/data/Docker.raw

# docker no referenced images [-f:filter (dangling=not referenced by any containers)]
docker images -f dangling=true

# docker remove no referenced images [-q:only display volume names]
docker rmi $(docker images -q -f dangling=true)

# docker no referenced volume [-f:filter (dangling=not referenced by any containers)]
docker volume ls -f dangling=true

# docker remove no referenced volume [-q:only display volume names]
docker volume rm $(docker volume ls -q -f dangling=true)

# docker remove unused build cache
docker builder prune
$ container_id: docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.State}}\t{{.Status}}\t{{.RunningFor}}" --- --headers 1 --column 1

;--------------------------------------------------------------
; git
;--------------------------------------------------------------

% git

# git diff staging file
git diff --cached -- <staging_filename> | delta<_no-gitconfig>

# git diff between master...HEAD
git diff<_--name-only> master...HEAD -- <filename1> | delta<_no-gitconfig>

# git diff between commits(default)
git diff <commit1>...<commit2> -- <filename2> | delta<_no-gitconfig>

# git show
git show <commit1> | delta<_no-gitconfig>

# git cherry-pick
git cherry-pick -n <commit1>

# git restore(default)
git checkout <commit>

# rename git file/directory
git mv <file_directory> <file_directory>

# rename git branch
git branch -m <branch> <branch>

# delete git branch
<git_fetch_>git branch -d <branch>

# delete git branch --merged
<git_fetch_>git branch --merged master | fzf -m | grep -vE '^\*|^archived.*|master$' | xargs -I % git branch -d %

# delete git remote branch
git push origin :<branch>

# git rebase
git rebase -i <commit1>

# git grep
git grep -l "<regex>" -- "<path>"

# stash file
git stash --message "<message>" -- <working_filename>

# stash list
git stash list

# stash show
git stash show <stash_num> ; read ; git stash show <stash_num> -p

# stash pop
git stash show <stash_num> -p ; read ; git stash pop <stash_num>

$ _no-gitconfig: echo -e " --no-gitconfig\n"
$ _--name-only: echo -e "\n --name-only"
$ git_fetch_: echo -e "\ngit fetch -p && "
$ commit1: git log <branch> --oneline | sed 's/ /!/' --- --column 1 --delimiter ! --preview "git show {1} | delta --no-gitconfig"
$ commit2: git log <branch> --oneline | sed 's/ /!/' --- --column 1 --delimiter ! --preview "git show {1} | delta --no-gitconfig"
$ commit: git branch | awk '{print $NF}' ; git log <branch> --oneline | sed 's/ /!/' --- --column 1 --delimiter ! --preview "git show {1} | delta --no-gitconfig"
$ branch: cat <(git rev-parse --abbrev-ref HEAD) <(git branch) | awk '{print $NF}'
$ stash_num: git stash list | column -t -s: --- --column 1
$ type: echo -e "f\nd"
$ file_directory: find $PWD -type d -path "$PWD/.*" -prune -o -not -name ".*" -type <type> -name "*" -print
$ filename1: echo "" && git diff --name-only --line-prefix=$(git rev-parse --show-toplevel)/ master...HEAD --- --column 1 --preview "git diff master...HEAD -- {1} | delta --no-gitconfig"
$ filename2: echo "" && git diff --name-only --line-prefix=$(git rev-parse --show-toplevel)/ <commit1>...<commit2>
$ working_filename: echo "" && git diff --name-only --line-prefix=$(git rev-parse --show-toplevel)/ HEAD --- --column 1 --preview "git diff HEAD -- {1} | delta --no-gitconfig"
$ staging_filename: echo "" && git diff --cached --name-only --line-prefix=$(git rev-parse --show-toplevel)/ --- --column 1 --preview "git diff --cached -- {1} | delta --no-gitconfig"

;--------------------------------------------------------------
; GitHub
;--------------------------------------------------------------

% GitHub CLI

# pr list [-s:open|closed|merged|all]
gh pr list --author "<author>" --assignee "" --search "<search>" --state <state>

# pr view
gh pr view <pr_no> --comments<_web>

# pr diff
gh pr view <pr_no> | sed -n 11,12p ; read ; gh pr diff <pr_no><_--name-only> | delta<_no-gitconfig>

# pr checks
gh pr checks <pr_no><_--watch><_web>

# pr checkout
gh pr checkout <pr_no>

# status
gh status

# pr & issue status
gh pr status ; gh issue status

# issues view
gh issue view <issue_no> --comments<_web>

# issues list(HOST)
gh issue list --assignee "<author>" --state <state>

# issues list [owner:repository owner(ex:pytorch)][repository:repository name(ex:pytorch/pytorch)]
gh issue list --repo "<repository>" --state <state> --search "<search>"

# watch workflow
gh run watch

# watch error workflow log
gh run view --log-failed

# rerun error workflow
gh run rerun --failed

# pr review
gh pr review <pr_review_no> <approve_comment> -b "<comment>"

# repository list [owner:repository owner(ex:pytorch)][-L:max num]
gh repo list <owner> -L 100

# repository show [owner:repository owner(ex:pytorch)]
gh repo view <repository> -w

$ author: echo -e "\n@me"
$ search: echo -e "\nuser-review-requested:@me"
$ approve_comment: echo -e "\n--comment\n--request-changes\n--approve"
$ _no-gitconfig: echo -e " --no-gitconfig\n"
$ _--watch: echo -e "\n --watch"
$ _--name-only: echo -e "\n --name-only"
$ state: echo -e "open\nall\nclosed\nmerged"
$ _web: echo -e "\n -w"
$ pr_no: gh pr list --author "<author>" --search "<search>" --state <state> --json number,title,headRefName,updatedAt --template \
  '{{range .}}{{tablerow (printf "%v" .number | autocolor "green") .title .headRefName (timeago .updatedAt)}}{{end}}' --- --column 1
$ pr_review_no: gh pr list --search "user-review-requested:@me" --state open --json number,title,headRefName,updatedAt --template \
  '{{range .}}{{tablerow (printf "%v" .number | autocolor "green") .title .headRefName (timeago .updatedAt)}}{{end}}' --- --column 1
$ issue_no: gh issue list --assignee "<author>" --state <state> --json number,state,title,author,updatedAt --template \
  '{{range .}}{{tablerow (printf "%v" .number | autocolor "green") .state .title .author.login (timeago .updatedAt)}}{{end}}' --- --column 1
$ repository: gh repo list <owner> -L 100 --json nameWithOwner,description,description,updatedAt --template \
  '{{range .}}{{tablerow (printf .nameWithOwner) .description .description (timeago .updatedAt)}}{{end}}' --- --column 1

;--------------------------------------------------------------
; mySQL
;--------------------------------------------------------------

% mySQL

# mysql login [ex:mysql -u root -p test_xxx]
mysql -u <user> -p <database>

;--------------------------------------------------------------
; python
;--------------------------------------------------------------

% Python

# delete .pyc files
find . -name \*.pyc -delete;

# http server
python -m http.server 8888

;--------------------------------------------------------------
; shell (pipe-command)
;--------------------------------------------------------------

% pipe-command

# awk : print $no field
awk '{print $<no>}'

# awk : print $no multi field
awk '{print $<no>,$<no2>}'

# awk : print filter [ex:awk '$5 >= 1000 {print $1}'][ex:awk '/^l/ {print $1}']
awk '<condition> {print $<no>}'

# awk : [-F:separater,default=' ']
awk -F "<separator>" '{print $<no>}'

# column : [-t:multi column=determine the number of columns][-s:separater][ex:column -t -s,]
column -t -s<separater>

# column : csv to table
column -t -s,

# cut : extract input by bytes [-c:char,-b:byte][cut_list:start-end,start-,-end]
cut -<cb> <cut_list>

# cut : extract input by field [-d:separater,default='\t'][-f:cut by field:no1,no2][ex:cut -f 1,7]
cut -d "<separater>" -f <cut_no>

# fzf [-m:multi select]
fzf

# less
less

# grep : normal
grep "<regex>"

# grep : [-i:ignore upper&lower][-n:output rows number]
grep -in "<regex>"

# grep : [-l:only filename] [ex:grep -il "" apps/**/*.py]
grep -il "<regex>"

# grep : [-E:extend regex,pattern match] [ex:grep -E "(X|Y)" apps/**/*.py]
grep -inE "(<pattern1>|<pattern2>)"

# grep : [-C n:output {n} lines] [ex:grep -C 1 -in "" apps/**/*.py]
grep -C <n> -i "<regex>"

# grep : [-v:output not match]
grep -vE "<regex>"

# head : [-n:output number]
head -n <num>

# sed : replace [ex:sed 's/ /!/']
sed 's/<before>/<after>/'

# sed : output selected line [-n:print only applied][ex:sed -n 10,11p]
sed -n <start>,<end>p

# sed : output matched line [-n:print only applied][ex:sed -n /^-/p]
sed -n /<regex>/p

# sed : delete selected line[ex:sed 1,5d]
sed <start>,<end>d

# sed : delete matched line [ex:sed /^d/d]
sed /<regex>/d

# tail : [-n:output number]
tail -n <num>

# tail : [-r:reverse]
tail -r

# tr : replace char [ex:tr 012 abc]
tr <before> <after>

# tr : delete char [ex:tr -d '\n']
tr -d '<char>'

# xargs : output to args [-I:arg replace][ex:xargs -I % git branch -d %]
xargs -I %

$ no: echo -e "\n(NF-1)\nNF"
$ no2: echo -e "\n(NF-1)\nNF"
$ cb: echo -e "c\nb"
$ cut_list: echo -e "<start_no>\n<start_no>-<end_no>\n<start_no>-\n-<end_no>"

;--------------------------------------------------------------
; shell
;--------------------------------------------------------------

% shell:ssh

# ssh-add
eval $(ssh-agent) && ssh-add ~/.ssh/{id_rsa,id_ed25519}

% shell

# cat : concatenate command output(process substitution)
cat <() <()

# cat : output file(hear document)
cat << EOF

# watch linux os version
cat /etc/os-release

# echo exit status
echo $?

# curl : curl http header
curl -s -D - localhost:8080 -o /dev/null

# df : disk free [--total:linux only][-h:human-readable]
df -h<_--total>

# du : disk usage [-c:display total][-s:display only depth0 directory][-h:human-readable]
du -csh

# lsof(=list open files) : show file,pid,user[-i:port]
lsof -i:<port>

# watch kernel version
uname -a

$ _--total: echo -e "\n --total"

;--------------------------------------------------------------
; SQL
;--------------------------------------------------------------

% SQL

# show variables
SHOW VARIABLES;

;--------------------------------------------------------------
; tmux
;--------------------------------------------------------------

% tmux
# tmux pane move [-h:yoko,-v:tate]
tmux join-pane -<hv> -s <pane_from> -t <pane_to>

# tmux pipe-pane
tmux pipe-pane -t <pane_from> 'cat | grep "<word>" >> <tty>' ; read ; tmux pipe-pane -t <pane_from>

$ hv: echo -e "v\nh"
$ pane_from: echo "." && tmux lsp -a -F "#S:#I.#P [#{b:pane_current_path}] [#{pane_current_command}] [#{pane_width}x#{pane_height}] #{pane_current_path} #{pane_tty}" | column -t --- --column 1
$ pane_to: echo "." && tmux lsp -a -F "#S:#I.#P [#{b:pane_current_path}] [#{pane_current_command}] [#{pane_width}x#{pane_height}] #{pane_current_path} #{pane_tty}" | column -t --- --column 1
$ tty: tmux lsp -a -F "#S:#I.#P [#{b:pane_current_path}] [#{pane_current_command}] [#{pane_width}x#{pane_height}] #{pane_current_path} #{pane_tty}" | column -t --- --column 6
